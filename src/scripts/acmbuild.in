#! /usr/bin/env bash
##########################################################################
##									##
##	acmbuild is automatically generated,				##
##		please do not modify!					##
##									##
##########################################################################

##########################################################################
##									##
## Script ID: acmbuild							##
## Author: Mark Grant							##
##									##
## Purpose:								##
## To simplify the AutoTools distribution build.			##
##									##
## Syntax:	acmbuild [ -h || --help || -V || --version ]		##
##									##
## Exit Codes:	0 & 64 - 113 as per C/C++ standard			##
##		0 - success						##
##		64 - Invalid arguments					##
##		65 - File(s) already exist				##
##		67 - trap received					##
##									##
## Further Info:							##
##									##
##########################################################################

##########################################################################
##									##
## Changelog								##
##									##
## Date		Author	Version	Description				##
##									##
## 25/06/2014	MG	1.0.1	Created.				##
## 02/08/2014	MG	1.0.2	Change naming from AutoTools to		##
##				AutoConf and Make.			##
## 27/10/2014	MG	1.0.3	Seperated each command in order to test	##
##				exit status.				##
## 13/11/2014	MG	1.0.4	Switched from getopts to GNU getopt to	##
##				allow long options.			##
##									##
##########################################################################

####################
## Init variables ##
####################
script_exit_code=0
version="1.0.4"			# set version variable
outputprefix="acmbuild: "

###############
## Functions ##
###############

# Output $1 to stdout or stderr depending on $2.
output()
{
	if [ $2 = 0 ]
	then
		echo "$outputprefix$1"
	else
		echo "$outputprefix$1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to cleanup and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received." 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

##########
## Main ##
##########
# Process command line arguments with GNU getopt.
GETOPTTEMP=`getopt -o hV --long help,version -n "$0" -- "$@"`
std_cmd_err_handler $?

eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?

while true
do
	case "$1" in
	-h|--help)	echo "Usage is $0 [options]"
		echo "	-h or --help displays usage information"
		echo "	OR"
		echo "	-V or --version displays version information"
		script_exit_code=0
		script_exit
		;;
	-V|--version)	echo "$0 version "$version
		script_exit_code=0
		script_exit
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1
		script_exit
		;;
	esac
done

# Script does not accept other arguments.
if [ $# -gt 0 ]
then
	script_exit_code=64
	output "Invalid argument." 1
	script_exit
fi

autoreconf -if 
status=$?
output "autoreconf -if completed with exit status: "$status $status
std_cmd_err_handler $status

./configure
status=$?
output "./configure completed with exit status: "$status $status
std_cmd_err_handler $status

make dist clean
status=$?
output "make dist clean completed with exit status: "$status $status
std_cmd_err_handler $status

make distclean
status=$?
output "make distclean completed with exit status: "$status $status
std_cmd_err_handler $status

script_exit_code=0
script_exit
